env:
  es2021: true
extends:
  - eslint:recommended
  - plugin:@typescript-eslint/recommended
  - plugin:@typescript-eslint/recommended-requiring-type-checking
parser: "@typescript-eslint/parser"
parserOptions:
  ecmaVersion: 12
  sourceType: module
  tsconfigRootDir: ./
  project:
    - ./tsconfig.json
    - ./src/server/tsconfig.json
plugins:
  - "@typescript-eslint"
rules:
  # vanilla warn
  accessor-pairs:
    - warn
    - setWithoutGet: true
      enforceForClassMembers: true
  array-bracket-spacing:
    - warn
    - always
    - objectsInArrays: false
      arraysInArrays: false
  arrow-spacing: warn
  comma-style: warn
  eol-last:
    - warn
    - always
  # dot-notation: "off" (should be fixed with typescript!)
  func-call-spacing: warn
  grouped-accessor-pairs:
    - warn
    - getBeforeSet
  key-spacing:
    - warn
    - beforeColon: false
      afterColon: true
      mode: strict
  lines-between-class-members:
    - warn
    - always
    - exceptAfterSingleLine: true
  no-alert: warn
  no-console: warn
  no-empty: warn
  no-multi-spaces: warn
  no-multiple-empty-lines:
    - warn
    - max: 1
      maxEOF: 0
      maxBOF: 0
  no-negated-condition: warn
  no-trailing-spaces:
    - warn
    - skipBlankLines: true
  no-useless-concat: warn
  no-useless-return: warn
  no-whitespace-before-property: warn
  object-curly-spacing:
    - warn
    - always
  object-shorthand: warn
  operator-linebreak:
    - warn
    - before
  padded-blocks:
    - warn
    - never
  prefer-const: warn
  semi-spacing:
    - warn
    - before: false
      after: true
  semi-style: warn
  space-before-blocks: warn
  space-before-function-paren:
    - warn
    - anonymous: always
      named: never
      asyncArrow: always
  space-in-parens: warn
  space-infix-ops: warn
  spaced-comment:
    - warn
    - always
  switch-colon-spacing: warn
  template-curly-spacing: warn
  yoda: warn

  # vanilla error
  array-callback-return: error
  arrow-parens: error
  curly: error
  default-case: error
  default-case-last: error
  eqeqeq: error
  init-declarations: error
  linebreak-style:
    - error
    - unix
  new-parens: error
  no-caller: error
  no-constructor-return: error
  no-extend-native: error
  no-floating-decimal: error
  no-implicit-coercion: error
  no-labels: error
  no-multi-assign: error
  no-new: error
  no-new-func: error
  no-new-object: error
  no-new-wrappers: error
  no-param-reassign: error
  no-plusplus: error
  no-restricted-globals:
    - error
    - name: parseInt
      message: Use Number.parseInt instead.
    - name: parseFloat
      message: Use Number.parseFloat instead.
    - name: NaN
      message: Use Number.NaN instead.
    - name: Infinity
      message: Use Number.Infinity instead.
    - name: isFinite
      message: Use Number.isFinite instead.
    - name: isNaN
      message: Use Number.isNaN instead.
    - name: globalThis
      message: globalThis is not allowed.
    - name: require
      message: require is not allowed.
  no-restricted-syntax:
    - error
    - selector: BinaryExpression[operator="in"]
      message: Unexpected operator, in operator is not allowed.
    - selector: BinaryExpression[operator="**"]
      message: Unexpected exponential operator, use Math.pow instead.
    - selector: UnaryExpression[operator="delete"]
      message: Unexpected operator, delete operator is not allowed.
    - selector: DoWhileStatement
      message: Unexpected statement, do while loop statement is not allowed.
    - selector: ForInStatement
      message: Unexpected statement, for in loop statement is not allowed.
    - selector: ForStatement
      message: Unexpected statement, traditional for loop statement is not allowed.
    - selector: ClassExpression
      message: Class expression is not allowed, use class definition instead.
    - selector: ClassProperty > ArrowFunctionExpression
      message: Arrow function expression is not allowed inside class.
    - selector: Identifier[optional=true]
      message: Optional parameter is not allowed.
    - selector: ThrowStatement[argument.type="CallExpression"]
      message: Use new keyword when throwing.
    - selector: FunctionExpression > AssignmentPattern
      message: Default parameter is not allowed.
    - selector: MethodDefinition[kind!="set"] > FunctionExpression[params.length=1] > Identifier > TSTypeAnnotation > TSTypeReference > Identifier[name=/Array/]
      message: Use spread parameter instead of single array parameter.
    - selector: TSAbstractMethodDefinition[accessibility="public"]
      message: Abstract method do not explicitly need 'public' keyword.
    - selector: ExportDefaultDeclaration[declaration.type!="Identifier"]
      message: Export default must not use with declaration statement.
    - MemberExpression[object.name="Array"][property.name!="from"]
    - MemberExpression[object.name="Object"][property.name!=/values|keys|entries/]
  no-sequences: error
  no-template-curly-in-string: error
  no-throw-literal: error
  # no-void: error
  no-undefined: error
  no-unneeded-ternary:
    - error
    - defaultAssignment: false
  one-var:
    - error
    - never
  prefer-arrow-callback: error
  prefer-object-spread: error
  prefer-promise-reject-errors: error
  prefer-regex-literals: error
  prefer-template: error
  quote-props:
    - error
    - as-needed

  # typescript warn
  comma-spacing: "off"
  "@typescript-eslint/comma-spacing":
    - warn
    - before: false
      after: true
  no-empty-function: "off"
  "@typescript-eslint/no-empty-function": warn
  brace-style: "off"
  "@typescript-eslint/brace-style":
    - warn
    - stroustrup
  indent: "off"
  "@typescript-eslint/indent":
    - warn
    - 2
  keyword-spacing: "off"
  "@typescript-eslint/keyword-spacing": warn
  "@typescript-eslint/no-empty-interface": warn
  "@typescript-eslint/prefer-string-starts-ends-with": warn
  "@typescript-eslint/type-annotation-spacing": warn

  # typescript error
  comma-dangle: "off"
  "@typescript-eslint/comma-dangle": error
  quotes: "off"
  "@typescript-eslint/quotes":
    - error
    - double
  semi: "off"
  "@typescript-eslint/semi": error
  "@typescript-eslint/array-type":
    - error
    - default: array
  "@typescript-eslint/ban-types":
    - error
    - types:
        undefined:
          message: Use null instead
          fixWith: "null"
        never: It is unsafe
        unknown: It is unsafe
        const: Use const in variable declaration instead
  "@typescript-eslint/member-delimiter-style":
    - error
    - multiline:
        delimiter: semi
        requireLast: true
      singleline:
        delimiter: semi
        requireLast: true
  "@typescript-eslint/method-signature-style":
    - error
    - method
  "@typescript-eslint/no-explicit-any": error
  "@typescript-eslint/no-dynamic-delete": error
  "@typescript-eslint/no-invalid-void-type": error
  "@typescript-eslint/no-misused-promises":
    - error
    - checksVoidReturn: false
  "@typescript-eslint/no-non-null-assertion": "error"
  "@typescript-eslint/no-this-alias": error
  "@typescript-eslint/non-nullable-type-assertion-style": error
  "@typescript-eslint/restrict-plus-operands":
    - error
    - checkCompoundAssignments: true

  # typescript off
  # "@typescript-eslint/restrict-template-expressions": "off"
  "@typescript-eslint/no-unsafe-argument": "off"
